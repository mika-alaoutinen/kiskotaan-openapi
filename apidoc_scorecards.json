{
  "openapi" : "3.0.3",
  "info" : {
    "description" : "API definition for Kiskotaan score cards service.",
    "title" : "Score cards OpenAPI",
    "version" : "0.1.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8083/api/"
  } ],
  "tags" : [ {
    "description" : "CRUD operations for handling score cards.",
    "name" : "ScoreCards"
  }, {
    "description" : "Adding a new score to a score card. This is it's own API to make Quarkus code generation work correctly.",
    "name" : "AddNewScore"
  }, {
    "description" : "CRUD operations for handling score rows in a score card.",
    "name" : "Scores"
  } ],
  "paths" : {
    "/scorecards" : {
      "get" : {
        "description" : "Returns a list of all score cards.",
        "operationId" : "getScoreCards",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/ScoreCard"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all score cards.",
        "tags" : [ "ScoreCards" ]
      },
      "post" : {
        "description" : "Add a new score card. Give course and players as request body, wrapped in a NewScoreCard resource.",
        "operationId" : "addScoreCard",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewScoreCard"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScoreCard"
                }
              }
            },
            "description" : "OK."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Add new score card.",
        "tags" : [ "ScoreCards" ]
      }
    },
    "/scorecards/{id}" : {
      "delete" : {
        "description" : "Delete a score card by ID.",
        "operationId" : "deleteScoreCard",
        "responses" : {
          "204" : {
            "description" : "The score card was deleted successfully."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Delete score card.",
        "tags" : [ "ScoreCards" ]
      },
      "get" : {
        "description" : "Get a single score card by ID.",
        "operationId" : "getScoreCard",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScoreCard"
                }
              }
            },
            "description" : "OK."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get score card.",
        "tags" : [ "ScoreCards" ]
      },
      "parameters" : [ {
        "description" : "Score card ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/scorecards/{id}/scores" : {
      "parameters" : [ {
        "description" : "Score card ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "post" : {
        "description" : "Adds a single score entry to a score card. New score Replaces old entry.",
        "operationId" : "addScore",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewScore"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Score"
                }
              }
            },
            "description" : "Added new score."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Add single score.",
        "tags" : [ "AddNewScore" ]
      }
    },
    "/scores/{id}" : {
      "delete" : {
        "description" : "Deletes a single score entry.",
        "operationId" : "deleteScore",
        "responses" : {
          "204" : {
            "description" : "Score was deleted successfully."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Delete single score.",
        "tags" : [ "Scores" ]
      },
      "get" : {
        "description" : "Finds a single score by ID.",
        "operationId" : "getScore",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Score"
                }
              }
            },
            "description" : "Found score entry."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get single score.",
        "tags" : [ "Scores" ]
      },
      "parameters" : [ {
        "description" : "Score ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    }
  },
  "components" : {
    "responses" : {
      "500ServerError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorBody"
            }
          }
        },
        "description" : "Unknown server error."
      },
      "ScoreCardResponse" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ScoreCard"
            }
          }
        },
        "description" : "OK."
      },
      "400BadRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ValidationErrorBody"
            }
          }
        },
        "description" : "Bad request."
      },
      "404NotFound" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorBody"
            }
          }
        },
        "description" : "Resource not found."
      }
    },
    "schemas" : {
      "Course" : {
        "description" : "Info about a course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "holes" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          }
        },
        "required" : [ "holes", "id", "name" ],
        "type" : "object"
      },
      "Player" : {
        "description" : "Info about a player.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          }
        },
        "required" : [ "firstName", "id", "lastName" ],
        "type" : "object"
      },
      "NewScoreCard" : {
        "description" : "A new  score card with selected course and players. Course and players are specified by IDs.",
        "properties" : {
          "courseId" : {
            "type" : "number"
          },
          "playerIds" : {
            "items" : {
              "type" : "number"
            },
            "maxItems" : 5,
            "minItems" : 1,
            "type" : "array",
            "uniqueItems" : true
          }
        },
        "required" : [ "courseId", "playerIds" ],
        "type" : "object"
      },
      "ScoreCard" : {
        "description" : "A score card for tracking scores for a group of players.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "course" : {
            "$ref" : "#/components/schemas/Course"
          },
          "players" : {
            "items" : {
              "$ref" : "#/components/schemas/Player"
            },
            "maxItems" : 5,
            "minItems" : 1,
            "type" : "array"
          },
          "scores" : {
            "items" : {
              "$ref" : "#/components/schemas/Score"
            },
            "type" : "array"
          }
        },
        "required" : [ "course", "id", "players", "scores" ]
      },
      "NewScore" : {
        "description" : "A new score entry for a player",
        "properties" : {
          "playerId" : {
            "type" : "number"
          },
          "hole" : {
            "maximum" : 30,
            "minimum" : 1,
            "type" : "integer"
          },
          "score" : {
            "maximum" : 99,
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "hole", "playerId", "score" ],
        "type" : "object"
      },
      "Score" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewScore"
        } ],
        "description" : "A score for a player",
        "properties" : {
          "id" : {
            "type" : "number"
          }
        },
        "required" : [ "id" ],
        "type" : "object"
      },
      "ErrorBody" : {
        "description" : "An error resource with that matches Spring's default error format.",
        "properties" : {
          "timestamp" : {
            "format" : "date-time",
            "type" : "string"
          },
          "status" : {
            "description" : "HTTP status code.",
            "type" : "integer"
          },
          "error" : {
            "description" : "Error status as text.",
            "type" : "string"
          },
          "message" : {
            "description" : "Custom error message.",
            "type" : "string"
          },
          "path" : {
            "description" : "Endpoint that was called.",
            "type" : "string"
          }
        },
        "required" : [ "code", "message", "status" ],
        "type" : "object"
      },
      "ValidationErrorBody" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ErrorBody"
        } ],
        "description" : "An extended error resource with a list of validation errors.",
        "properties" : {
          "validationErrors" : {
            "items" : {
              "$ref" : "#/components/schemas/ValidationError"
            },
            "type" : "array"
          }
        },
        "required" : [ "courseId", "id" ],
        "type" : "object"
      },
      "ValidationError" : {
        "description" : "A validation error.",
        "properties" : {
          "field" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "field", "message" ],
        "type" : "object"
      }
    }
  }
}