{
  "openapi" : "3.0.3",
  "info" : {
    "description" : "API definition for Kiskotaan queries service.",
    "title" : "Queries OpenAPI",
    "version" : "0.1.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080"
  } ],
  "tags" : [ {
    "description" : "Fetch disc golf courses.",
    "name" : "QueryCourses"
  }, {
    "description" : "Fetch players.",
    "name" : "QueryPlayers"
  }, {
    "description" : "Fetch disc golf score cards.",
    "name" : "QueryScoreCards"
  } ],
  "paths" : {
    "/courses" : {
      "get" : {
        "description" : "Returns a list of all courses. Courses can be filtered.",
        "operationId" : "getCourses",
        "parameters" : [ {
          "description" : "Filter courses by name. Does not have to be an exact match.",
          "in" : "query",
          "name" : "name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter courses by minimum hole count, inclusive.",
          "in" : "query",
          "name" : "holesMin",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by maximum hole count, inclusive.",
          "in" : "query",
          "name" : "holesMax",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by minimum course par, inclusive.",
          "in" : "query",
          "name" : "parMin",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by maximum course par, inclusive.",
          "in" : "query",
          "name" : "parMax",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/CourseSummary"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all courses.",
        "tags" : [ "QueryCourses" ]
      }
    },
    "/courses/{id}" : {
      "get" : {
        "description" : "Find a single course by ID.",
        "operationId" : "getCourse",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Course"
                }
              }
            },
            "description" : "Course found."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Find course by ID.",
        "tags" : [ "QueryCourses" ]
      },
      "parameters" : [ {
        "description" : "Course id.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/players" : {
      "get" : {
        "description" : "Returns a list of all players. Players can be filtered by name.",
        "operationId" : "getPlayers",
        "parameters" : [ {
          "description" : "Filter players by name. If given a single input, filter considers both the players'\nfirst and last names. If given two inputs separated by a plus sign, filter treats\nfirst input as a first name and second input as a last name. If given more than two\ninputs separated by a plus sign, filter only considers the first two inputs and\nignores the rest. Filters do not have to be an exact match.\n",
          "example" : "?name=Pekka+Kana",
          "in" : "query",
          "name" : "name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Player"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all players.",
        "tags" : [ "QueryPlayers" ]
      }
    },
    "/players/{id}" : {
      "get" : {
        "description" : "Get a single player by player ID.",
        "operationId" : "getPlayer",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Player"
                }
              }
            },
            "description" : "Found player."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get player by ID.",
        "tags" : [ "QueryPlayers" ]
      },
      "parameters" : [ {
        "description" : "Player's ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/scorecards" : {
      "get" : {
        "description" : "Returns a list of all score cards.",
        "operationId" : "getScoreCards",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/ScoreCardSummary"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all score cards.",
        "tags" : [ "QueryScoreCards" ]
      }
    },
    "/scorecards/{id}" : {
      "get" : {
        "description" : "Get a single score card by ID.",
        "operationId" : "getScoreCard",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScoreCard"
                }
              }
            },
            "description" : "Score card found."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get score card.",
        "tags" : [ "QueryScoreCards" ]
      },
      "parameters" : [ {
        "description" : "Score card ID.",
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    }
  },
  "components" : {
    "responses" : {
      "500ServerError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorBody"
            }
          }
        },
        "description" : "Unknown server error."
      },
      "404NotFound" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorBody"
            }
          }
        },
        "description" : "Resource not found."
      }
    },
    "schemas" : {
      "Course" : {
        "description" : "A disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "holes" : {
            "items" : {
              "$ref" : "#/components/schemas/Hole"
            },
            "type" : "array"
          },
          "name" : {
            "type" : "string"
          },
          "par" : {
            "type" : "number"
          }
        },
        "required" : [ "holes", "id", "name" ]
      },
      "CourseSummary" : {
        "description" : "A summary view of a disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "name" : {
            "type" : "string"
          },
          "holes" : {
            "type" : "number"
          },
          "par" : {
            "type" : "number"
          }
        },
        "required" : [ "holes", "id", "name", "par" ]
      },
      "Hole" : {
        "description" : "A hole in a disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "number" : {
            "type" : "integer"
          },
          "par" : {
            "type" : "integer"
          },
          "distance" : {
            "type" : "integer"
          }
        },
        "required" : [ "distance", "id", "number", "par" ],
        "type" : "object"
      },
      "Player" : {
        "description" : "Info about a player.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          }
        },
        "required" : [ "firstName", "id", "lastName" ],
        "type" : "object"
      },
      "Score" : {
        "description" : "A score for a player",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "hole" : {
            "type" : "integer"
          },
          "score" : {
            "type" : "integer"
          }
        },
        "required" : [ "hole", "id", "score" ],
        "type" : "object"
      },
      "ScoreSummary" : {
        "description" : "Player's score summary for a round.",
        "properties" : {
          "playerId" : {
            "type" : "number"
          },
          "result" : {
            "description" : "How many strokes over or under par was the final score.",
            "type" : "integer"
          },
          "roundScore" : {
            "description" : "Total round score.",
            "type" : "integer"
          }
        },
        "required" : [ "playerId", "result", "roundScore" ]
      },
      "ScoreCard" : {
        "description" : "A score card for tracking scores for a group of players.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "course" : {
            "$ref" : "#/components/schemas/Course"
          },
          "players" : {
            "items" : {
              "$ref" : "#/components/schemas/Player"
            },
            "type" : "array"
          },
          "scores" : {
            "additionalProperties" : {
              "items" : {
                "$ref" : "#/components/schemas/Score"
              },
              "type" : "array"
            },
            "description" : "Map of players' scores. Key is playerId and value is list of scores.\nKeys are strings due to OpenAPI spec limitations.\n",
            "example" : {
              "123" : [ {
                "id" : 111,
                "hole" : 1,
                "score" : 3
              } ],
              "456" : [ {
                "id" : 222,
                "hole" : 1,
                "score" : 4
              } ]
            },
            "type" : "object"
          }
        },
        "required" : [ "course", "id", "players", "scores" ]
      },
      "ScoreCardSummary" : {
        "description" : "A summary view of a score card.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "course" : {
            "$ref" : "#/components/schemas/CourseSummary"
          },
          "players" : {
            "items" : {
              "$ref" : "#/components/schemas/Player"
            },
            "type" : "array"
          },
          "scores" : {
            "items" : {
              "$ref" : "#/components/schemas/ScoreSummary"
            },
            "type" : "array"
          }
        },
        "required" : [ "course", "id", "players", "scores" ]
      },
      "ErrorBody" : {
        "description" : "An error resource with that matches Spring's default error format.",
        "properties" : {
          "timestamp" : {
            "format" : "date-time",
            "type" : "string"
          },
          "status" : {
            "description" : "HTTP status code.",
            "type" : "integer"
          },
          "error" : {
            "description" : "Error status as text.",
            "type" : "string"
          },
          "message" : {
            "description" : "Custom error message.",
            "type" : "string"
          },
          "path" : {
            "description" : "Endpoint that was called.",
            "type" : "string"
          }
        },
        "required" : [ "code", "message", "status" ],
        "type" : "object"
      }
    }
  }
}