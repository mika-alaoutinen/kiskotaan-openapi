{
  "openapi" : "3.0.3",
  "info" : {
    "description" : "API definition for Kiskotaan disc golf score card application.",
    "title" : "Kiskotaan OpenAPI",
    "version" : "0.2.0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080"
  } ],
  "tags" : [ {
    "description" : "Fetch courses. API not used currently.",
    "name" : "QueryCourses"
  }, {
    "description" : "Fetch players. API not used currently.",
    "name" : "QueryPlayers"
  }, {
    "description" : "Fetch score cards. API not used currently.",
    "name" : "QueryScoreCards"
  }, {
    "description" : "CRUD operations for handling courses.",
    "name" : "Courses"
  }, {
    "description" : "CRUD operations for handling a course's holes.",
    "name" : "Holes"
  }, {
    "description" : "CRUD operations for handling players.",
    "name" : "Players"
  }, {
    "description" : "CRUD operations for handling score cards.",
    "name" : "ScoreCards"
  }, {
    "description" : "Adding a new score to a score card. This is it's own API to make Quarkus code generation work correctly.",
    "name" : "AddNewScore"
  }, {
    "description" : "CRUD operations for handling score rows in a score card.",
    "name" : "Scores"
  } ],
  "paths" : {
    "/query/courses" : {
      "get" : {
        "description" : "Returns a list of all courses. Courses can be filtered.",
        "operationId" : "getCourses",
        "parameters" : [ {
          "description" : "Filter courses by name. Does not have to be an exact match.",
          "in" : "query",
          "name" : "name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter courses by minimum hole count, inclusive.",
          "in" : "query",
          "name" : "holesMin",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by maximum hole count, inclusive.",
          "in" : "query",
          "name" : "holesMax",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by minimum course par, inclusive.",
          "in" : "query",
          "name" : "parMin",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by maximum course par, inclusive.",
          "in" : "query",
          "name" : "parMax",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/CourseSummary"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all courses.",
        "tags" : [ "QueryCourses" ]
      }
    },
    "/query/courses/{id}" : {
      "get" : {
        "description" : "Find a single course by ID.",
        "operationId" : "getCourse",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Course"
                }
              }
            },
            "description" : "Course found."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Find course by ID.",
        "tags" : [ "QueryCourses" ]
      }
    },
    "/query/players" : {
      "get" : {
        "description" : "Returns a list of all players. Players can be filtered by name.",
        "operationId" : "getPlayers",
        "parameters" : [ {
          "description" : "Filter players by name. If given a single input, filter considers both the players'\nfirst and last names. If given two inputs separated by a plus sign, filter treats\nfirst input as a first name and second input as a last name. If given more than two\ninputs separated by a plus sign, filter only considers the first two inputs and\nignores the rest. Filters do not have to be an exact match.\n",
          "example" : "?name=Pekka+Kana",
          "in" : "query",
          "name" : "name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Player"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all players.",
        "tags" : [ "QueryPlayers" ]
      }
    },
    "/query/players/{id}" : {
      "get" : {
        "description" : "Get a single player by player ID.",
        "operationId" : "getPlayer",
        "parameters" : [ {
          "description" : "Player's ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Player"
                }
              }
            },
            "description" : "Found player."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get player by ID.",
        "tags" : [ "QueryPlayers" ]
      }
    },
    "/query/scorecards" : {
      "get" : {
        "description" : "Returns a list of all score cards.",
        "operationId" : "getScoreCards",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/ScoreCardSummary"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all score cards.",
        "tags" : [ "QueryScoreCards" ]
      }
    },
    "/query/scorecards/{id}" : {
      "get" : {
        "description" : "Get a single score card by ID.",
        "operationId" : "getScoreCard",
        "parameters" : [ {
          "description" : "Score card ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScoreCard"
                }
              }
            },
            "description" : "Score card found."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get score card.",
        "tags" : [ "QueryScoreCards" ]
      }
    },
    "/courses" : {
      "get" : {
        "description" : "Returns a list of all courses. Courses can be filtered.",
        "operationId" : "getCourses",
        "parameters" : [ {
          "description" : "Filter courses by name. Does not have to be an exact match.",
          "in" : "query",
          "name" : "name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Filter courses by minimum hole count, inclusive.",
          "in" : "query",
          "name" : "holesMin",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by maximum hole count, inclusive.",
          "in" : "query",
          "name" : "holesMax",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by minimum course par, inclusive.",
          "in" : "query",
          "name" : "parMin",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Filter courses by maximum course par, inclusive.",
          "in" : "query",
          "name" : "parMax",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/CourseSummary_1"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all courses.",
        "tags" : [ "Courses" ]
      },
      "post" : {
        "description" : "Add a new course.",
        "operationId" : "addCourse",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewCourse"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Course_1"
                }
              }
            },
            "description" : "OK."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Add new course.",
        "tags" : [ "Courses" ]
      }
    },
    "/courses/{id}" : {
      "delete" : {
        "description" : "Delete course by ID.",
        "operationId" : "deleteCourse",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The course was deleted successfully."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Delete course.",
        "tags" : [ "Courses" ]
      },
      "get" : {
        "description" : "Find a single course by ID.",
        "operationId" : "getCourse",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Course_1"
                }
              }
            },
            "description" : "OK."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Find course by ID.",
        "tags" : [ "Courses" ]
      },
      "patch" : {
        "description" : "Update the given course's name.",
        "operationId" : "updateCourseName",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewCourseName"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CourseName"
                }
              }
            },
            "description" : "Name updated successfully."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Update course name.",
        "tags" : [ "Courses" ]
      }
    },
    "/courses/{id}/holes" : {
      "get" : {
        "description" : "Get all holes for a course by course ID.",
        "operationId" : "getHoles",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Hole_1"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all holes for a course.",
        "tags" : [ "Holes" ]
      },
      "post" : {
        "description" : "Add a new hole to a course identified by course ID.",
        "operationId" : "addHole",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Hole_1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Hole_1"
                }
              }
            },
            "description" : "New hole added succesfully."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Add a new hole to a given course.",
        "tags" : [ "Holes" ]
      }
    },
    "/courses/{id}/holes/{number}" : {
      "delete" : {
        "description" : "Delete a hole identified by its ID.",
        "operationId" : "deleteHole",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Hole number.",
          "in" : "path",
          "name" : "number",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The hole was deleted successfully."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Delete a single hole of a given course.",
        "tags" : [ "Holes" ]
      },
      "get" : {
        "description" : "Get a hole identified by course ID and hole ID.",
        "operationId" : "getHole",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Hole number.",
          "in" : "path",
          "name" : "number",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Hole_1"
                }
              }
            },
            "description" : "OK."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get a single hole of a given course.",
        "tags" : [ "Holes" ]
      },
      "put" : {
        "description" : "Update a hole identified by course ID and hole ID.",
        "operationId" : "updateHole",
        "parameters" : [ {
          "description" : "Course id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "description" : "Hole number.",
          "in" : "path",
          "name" : "number",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatedHole"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Hole_1"
                }
              }
            },
            "description" : "OK."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Update a single hole of a given course.",
        "tags" : [ "Holes" ]
      }
    },
    "/players" : {
      "get" : {
        "description" : "Returns a list of all players. Players can be filtered by name.",
        "operationId" : "getPlayers",
        "parameters" : [ {
          "description" : "Filter players by name. If given a single input, filter considers both the players'\nfirst and last names. If given two inputs separated by a plus sign, filter treats\nfirst input as a first name and second input as a last name. If given more than two\ninputs separated by a plus sign, filter only considers the first two inputs and\nignores the rest. Filters do not have to be an exact match.\n",
          "example" : "?name=Pekka+Kana",
          "in" : "query",
          "name" : "name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Player_1"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all players.",
        "tags" : [ "Players" ]
      },
      "post" : {
        "description" : "Add a new player.",
        "operationId" : "addPlayer",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PlayerRequest"
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Player_1"
                }
              }
            },
            "description" : "OK."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Add new player.",
        "tags" : [ "Players" ]
      }
    },
    "/players/{id}" : {
      "delete" : {
        "description" : "Delete a player by player ID.",
        "operationId" : "deletePlayer",
        "parameters" : [ {
          "description" : "Player's ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The player was deleted successfully."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Delete a player.",
        "tags" : [ "Players" ]
      },
      "get" : {
        "description" : "Get a single player by player ID.",
        "operationId" : "getPlayer",
        "parameters" : [ {
          "description" : "Player's ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Player_1"
                }
              }
            },
            "description" : "OK."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get player by ID.",
        "tags" : [ "Players" ]
      },
      "put" : {
        "description" : "Update a single player by player ID.",
        "operationId" : "updatePlayer",
        "parameters" : [ {
          "description" : "Player's ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PlayerRequest"
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Player_1"
                }
              }
            },
            "description" : "OK."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Update player by ID.",
        "tags" : [ "Players" ]
      }
    },
    "/scorecards" : {
      "get" : {
        "description" : "Returns a summarized list of all score cards.",
        "operationId" : "getScoreCards",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/ScoreCardSummary_1"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get all score cards.",
        "tags" : [ "ScoreCards" ]
      },
      "post" : {
        "description" : "Add a new score card. Give course and players as request body, wrapped in a NewScoreCard resource.",
        "operationId" : "addScoreCard",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewScoreCard"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScoreCard_1"
                }
              }
            },
            "description" : "OK."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Add new score card.",
        "tags" : [ "ScoreCards" ]
      }
    },
    "/scorecards/{id}" : {
      "delete" : {
        "description" : "Delete a score card by ID.",
        "operationId" : "deleteScoreCard",
        "parameters" : [ {
          "description" : "Score card ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The score card was deleted successfully."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Delete score card.",
        "tags" : [ "ScoreCards" ]
      },
      "get" : {
        "description" : "Get a single score card by ID.",
        "operationId" : "getScoreCard",
        "parameters" : [ {
          "description" : "Score card ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScoreCard_1"
                }
              }
            },
            "description" : "OK."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get score card.",
        "tags" : [ "ScoreCards" ]
      }
    },
    "/scorecards/{id}/scores" : {
      "post" : {
        "description" : "Adds a single score entry to a score card. New score Replaces old entry.",
        "operationId" : "addScore",
        "parameters" : [ {
          "description" : "Score card ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewScore"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Score_1"
                }
              }
            },
            "description" : "Added new score."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationErrorBody"
                }
              }
            },
            "description" : "Bad request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Add single score.",
        "tags" : [ "AddNewScore" ]
      }
    },
    "/scores/{id}" : {
      "delete" : {
        "description" : "Deletes a single score entry.",
        "operationId" : "deleteScore",
        "parameters" : [ {
          "description" : "Score ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Score was deleted successfully."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Delete single score.",
        "tags" : [ "Scores" ]
      },
      "get" : {
        "description" : "Finds a single score by ID.",
        "operationId" : "getScore",
        "parameters" : [ {
          "description" : "Score ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Score_1"
                }
              }
            },
            "description" : "Found score entry."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorBody"
                }
              }
            },
            "description" : "Unknown server error."
          }
        },
        "summary" : "Get single score.",
        "tags" : [ "Scores" ]
      }
    }
  },
  "components" : {
    "requestBodies" : {
      "PlayerRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/NewPlayer"
            }
          }
        },
        "required" : true
      }
    },
    "responses" : {
      "500ServerError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorBody"
            }
          }
        },
        "description" : "Unknown server error."
      },
      "404NotFound" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorBody"
            }
          }
        },
        "description" : "Resource not found."
      },
      "CourseResponse" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Course_1"
            }
          }
        },
        "description" : "OK."
      },
      "400BadRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ValidationErrorBody"
            }
          }
        },
        "description" : "Bad request."
      },
      "HoleResponse" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Hole_1"
            }
          }
        },
        "description" : "OK."
      },
      "PlayerResponse" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Player_1"
            }
          }
        },
        "description" : "OK."
      },
      "ScoreCardResponse" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ScoreCard_1"
            }
          }
        },
        "description" : "OK."
      }
    },
    "schemas" : {
      "NewCourse" : {
        "description" : "A new disc golf course without ID.",
        "properties" : {
          "name" : {
            "maxLength" : 40,
            "minLength" : 3,
            "type" : "string"
          },
          "holes" : {
            "items" : {
              "$ref" : "#/components/schemas/Hole_1"
            },
            "maxItems" : 30,
            "minItems" : 1,
            "type" : "array"
          }
        },
        "required" : [ "holes", "name" ],
        "type" : "object"
      },
      "Course" : {
        "description" : "A disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "holes" : {
            "items" : {
              "$ref" : "#/components/schemas/Hole"
            },
            "type" : "array"
          },
          "name" : {
            "type" : "string"
          },
          "par" : {
            "type" : "number"
          }
        },
        "required" : [ "holes", "id", "name" ]
      },
      "NewCourseName" : {
        "description" : "Name of a disc golf course.",
        "properties" : {
          "name" : {
            "maxLength" : 40,
            "minLength" : 3,
            "type" : "string"
          }
        },
        "required" : [ "name" ]
      },
      "CourseName" : {
        "description" : "A new name for a disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "name" : {
            "maxLength" : 40,
            "minLength" : 3,
            "type" : "string"
          }
        },
        "required" : [ "id", "name" ]
      },
      "CourseSummary" : {
        "description" : "A summary view of a disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "name" : {
            "type" : "string"
          },
          "holes" : {
            "type" : "number"
          },
          "par" : {
            "type" : "number"
          }
        },
        "required" : [ "holes", "id", "name", "par" ]
      },
      "Hole" : {
        "description" : "A hole in a disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "number" : {
            "type" : "integer"
          },
          "par" : {
            "type" : "integer"
          },
          "distance" : {
            "type" : "integer"
          }
        },
        "required" : [ "distance", "id", "number", "par" ],
        "type" : "object"
      },
      "UpdatedHole" : {
        "description" : "An updated course without number. Hole number cannot be changed.",
        "properties" : {
          "par" : {
            "maximum" : 6,
            "minimum" : 2,
            "type" : "integer"
          },
          "distance" : {
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "distance", "par" ],
        "type" : "object"
      },
      "NewPlayer" : {
        "description" : "A new player without ID.",
        "properties" : {
          "firstName" : {
            "maxLength" : 40,
            "minLength" : 1,
            "type" : "string"
          },
          "lastName" : {
            "maxLength" : 40,
            "minLength" : 1,
            "type" : "string"
          }
        },
        "required" : [ "firstName", "lastName" ],
        "type" : "object"
      },
      "Player" : {
        "description" : "Info about a player.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          }
        },
        "required" : [ "firstName", "id", "lastName" ],
        "type" : "object"
      },
      "NewScoreCard" : {
        "description" : "A new  score card with selected course and players. Course and players are specified by IDs.",
        "properties" : {
          "courseId" : {
            "type" : "number"
          },
          "playerIds" : {
            "items" : {
              "type" : "number"
            },
            "maxItems" : 5,
            "minItems" : 1,
            "type" : "array",
            "uniqueItems" : true
          }
        },
        "required" : [ "courseId", "playerIds" ],
        "type" : "object"
      },
      "ScoreCard" : {
        "description" : "A score card for tracking scores for a group of players.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "course" : {
            "$ref" : "#/components/schemas/Course"
          },
          "players" : {
            "items" : {
              "$ref" : "#/components/schemas/Player"
            },
            "type" : "array"
          },
          "scores" : {
            "additionalProperties" : {
              "items" : {
                "$ref" : "#/components/schemas/Score"
              },
              "type" : "array"
            },
            "description" : "Map of players' scores. Key is playerId and value is list of scores.\nKeys are strings due to OpenAPI spec limitations.\n",
            "example" : {
              "123" : [ {
                "id" : 111,
                "hole" : 1,
                "score" : 3
              } ],
              "456" : [ {
                "id" : 222,
                "hole" : 1,
                "score" : 4
              } ]
            },
            "type" : "object"
          }
        },
        "required" : [ "course", "id", "players", "scores" ]
      },
      "ScoreCardSummary" : {
        "description" : "A summary view of a score card.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "course" : {
            "$ref" : "#/components/schemas/CourseSummary"
          },
          "players" : {
            "items" : {
              "$ref" : "#/components/schemas/Player"
            },
            "type" : "array"
          },
          "scores" : {
            "items" : {
              "$ref" : "#/components/schemas/ScoreSummary"
            },
            "type" : "array"
          }
        },
        "required" : [ "course", "id", "players", "scores" ]
      },
      "NewScore" : {
        "description" : "A new score entry for a player.",
        "properties" : {
          "playerId" : {
            "type" : "number"
          },
          "hole" : {
            "maximum" : 30,
            "minimum" : 1,
            "type" : "integer"
          },
          "score" : {
            "maximum" : 99,
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "hole", "playerId", "score" ],
        "type" : "object"
      },
      "Score" : {
        "description" : "A score for a player",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "hole" : {
            "type" : "integer"
          },
          "score" : {
            "type" : "integer"
          }
        },
        "required" : [ "hole", "id", "score" ],
        "type" : "object"
      },
      "Result" : {
        "description" : "A summarized view of player's round scores.",
        "properties" : {
          "holesPlayed" : {
            "description" : "How many holes have been played.",
            "type" : "integer"
          },
          "result" : {
            "description" : "How many strokes over or under course par the current total score is.",
            "type" : "integer"
          },
          "total" : {
            "description" : "Sum of player's scores for all holes.",
            "type" : "integer"
          }
        },
        "required" : [ "holesPlayed", "result", "total" ],
        "type" : "object"
      },
      "ErrorBody" : {
        "description" : "An error resource with that matches Spring's default error format.",
        "properties" : {
          "timestamp" : {
            "format" : "date-time",
            "type" : "string"
          },
          "status" : {
            "description" : "HTTP status code.",
            "type" : "integer"
          },
          "error" : {
            "description" : "Error status as text.",
            "type" : "string"
          },
          "message" : {
            "description" : "Custom error message.",
            "type" : "string"
          },
          "path" : {
            "description" : "Endpoint that was called.",
            "type" : "string"
          }
        },
        "required" : [ "code", "message", "status" ],
        "type" : "object"
      },
      "ValidationErrorBody" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ErrorBody"
        } ],
        "description" : "An extended error resource with a list of validation errors.",
        "properties" : {
          "validationErrors" : {
            "items" : {
              "$ref" : "#/components/schemas/ValidationError"
            },
            "type" : "array"
          }
        },
        "required" : [ "courseId", "id" ],
        "type" : "object"
      },
      "ScoreSummary" : {
        "description" : "Player's score summary for a round.",
        "properties" : {
          "playerId" : {
            "type" : "number"
          },
          "result" : {
            "description" : "How many strokes over or under par was the final score.",
            "type" : "integer"
          },
          "roundScore" : {
            "description" : "Total round score.",
            "type" : "integer"
          }
        },
        "required" : [ "playerId", "result", "roundScore" ]
      },
      "CourseSummary_1" : {
        "description" : "A summary view of a disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "name" : {
            "maxLength" : 40,
            "minLength" : 3,
            "type" : "string"
          },
          "holes" : {
            "type" : "number"
          },
          "par" : {
            "type" : "number"
          }
        },
        "required" : [ "holes", "id", "name", "par" ]
      },
      "Hole_1" : {
        "description" : "A hole in a disc golf course. Does not have ID because holes of a particular\ncourse should be distinct and identifiable by the hole number.\n",
        "properties" : {
          "number" : {
            "maximum" : 30,
            "minimum" : 1,
            "type" : "integer"
          },
          "par" : {
            "maximum" : 6,
            "minimum" : 2,
            "type" : "integer"
          },
          "distance" : {
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "distance", "number", "par" ],
        "type" : "object"
      },
      "Course_1" : {
        "description" : "A disc golf course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "name" : {
            "maxLength" : 40,
            "minLength" : 3,
            "type" : "string"
          },
          "holes" : {
            "items" : {
              "$ref" : "#/components/schemas/Hole_1"
            },
            "maxItems" : 30,
            "minItems" : 1,
            "type" : "array"
          }
        },
        "required" : [ "holes", "id", "name" ]
      },
      "ValidationError" : {
        "description" : "A validation error.",
        "properties" : {
          "field" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "field", "message" ],
        "type" : "object"
      },
      "Player_1" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewPlayer"
        } ],
        "description" : "A player returned from backend, who has an ID.",
        "properties" : {
          "id" : {
            "type" : "number"
          }
        },
        "required" : [ "id" ]
      },
      "ScoreCardSummary_1" : {
        "description" : "A summarized view of a score card with scores condensed.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "course" : {
            "$ref" : "#/components/schemas/Course_2"
          },
          "players" : {
            "items" : {
              "$ref" : "#/components/schemas/Player"
            },
            "maxItems" : 5,
            "minItems" : 1,
            "type" : "array"
          },
          "results" : {
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Result"
            },
            "description" : "Map of players' round scores. Key is playerId and value is summary of player's round score.\nKeys are strings due to OpenAPI spec limitations.\n",
            "type" : "object"
          }
        },
        "required" : [ "course", "id", "players", "results" ]
      },
      "Course_2" : {
        "description" : "Info about a course.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "holes" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "par" : {
            "type" : "integer"
          }
        },
        "required" : [ "holes", "id", "name", "par" ],
        "type" : "object"
      },
      "ScoreCard_1" : {
        "description" : "A score card for tracking scores for a group of players.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "course" : {
            "$ref" : "#/components/schemas/Course_2"
          },
          "players" : {
            "items" : {
              "$ref" : "#/components/schemas/Player"
            },
            "maxItems" : 5,
            "minItems" : 1,
            "type" : "array"
          },
          "results" : {
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Result"
            },
            "description" : "Map of players' round scores. Key is playerId and value is summary of player's round score.\nKeys are strings due to OpenAPI spec limitations.\n",
            "type" : "object"
          },
          "scores" : {
            "additionalProperties" : {
              "items" : {
                "$ref" : "#/components/schemas/Score_1"
              },
              "type" : "array"
            },
            "description" : "Map of players' scores. Key is playerId and value is list of scores.\nKeys are strings due to OpenAPI spec limitations.\n",
            "type" : "object"
          }
        },
        "required" : [ "course", "id", "players", "results", "scores" ]
      },
      "Score_1" : {
        "description" : "A score entry embedded in PlayerScore object.",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "hole" : {
            "maximum" : 30,
            "minimum" : 1,
            "type" : "integer"
          },
          "score" : {
            "maximum" : 99,
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "hole", "id", "score" ],
        "type" : "object"
      }
    }
  }
}